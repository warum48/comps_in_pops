import React, { useRef, useState, useEffect } from "react";
import { gsap } from "gsap";
import LinkGA from "../GoogleAnalytics/LinkGA";
import Popup from "./Popup";
import DB from "./DB";
import {
  useOnScreen,
  useInterval,
  useEffectDebugger,
  useToggle,
  useFirstRender
} from "../Utils";

//{curPopupNum != -1 && ( )}

const PopupTriggers = (props) => {
  const [totalPopups, setTotalPopups] = useState(2);
  const [curPopupNum, setCurPopupNum] = useState(-1);
  const [menuIsOn, toggleMenuIsOn] = useToggle();
  const [popupIsOpen, setPopupIsOpen] = useState(false);
  const isFirstRender = useFirstRender();
  const svgref = useRef(null);

  function nextPopup() {
    setCurPopupNum((curPopupNum) => {
      if (curPopupNum < DB.length - 1) {
        curPopupNum += 1;
      } else {
        curPopupNum = 0;
      }
      return curPopupNum;
    });
  }
  function prevPopup() {
    setCurPopupNum((curPopupNum) => {
      if (curPopupNum > 0) {
        curPopupNum -= 1;
      } else {
        curPopupNum = DB.length - 1;
      }
      return curPopupNum;
    });
  }

  useEffect(() => {
    if (!isFirstRender) {
      if (curPopupNum != -1) {
        setPopupIsOpen(true);
      } else {
        setPopupIsOpen(false);
      }
    }
  }, [curPopupNum]);

  useEffect(() => {
    /*svgref.current.getElementById("click_0").addEventListener("click", () => {
      console.log("clicked");
      setCurPopupNum(0);
    });
    svgref.current
      .getElementById("click_0")
      .addEventListener("mouseenter", () => {
        console.log("mouseover");
        gsap.to(svgref.current.getElementById("view_0"), {
          transformOrigin: "50% 50%",
          duration: 0.3,
          rotation: 5,
          scale: 1.1
        });
      });
    svgref.current
      .getElementById("click_0")
      .addEventListener("mouseleave", () => {
        console.log("mouseout");
        gsap.to(svgref.current.getElementById("view_0"), {
          transformOrigin: "50% 50%",
          duration: 0.3,
          rotation: 0,
          scale: 1
        });
      });*/

    DB.forEach((item, index) => {
      if (svgref.current.getElementById("click_" + index)) {
        const indexInDB = DB.findIndex(
          (item) => item.click_id === "click_" + index
        );
        svgref.current
          .getElementById("click_" + index)
          .addEventListener("click", () => {
            console.log("clicked", indexInDB);
            setCurPopupNum(indexInDB);
          });

        svgref.current
          .getElementById("click_" + index)
          .addEventListener("mouseenter", () => {
            console.log("mouseover");
            gsap.to(svgref.current.getElementById("view_" + index), {
              transformOrigin: "50% 50%",
              duration: 0.3,
              rotation: 5,
              scale: 1.1
            });
          });
        svgref.current
          .getElementById("click_" + index)
          .addEventListener("mouseleave", () => {
            console.log("mouseout");
            gsap.to(svgref.current.getElementById("view_" + index), {
              transformOrigin: "50% 50%",
              duration: 0.3,
              rotation: 0,
              scale: 1
            });
          });
      }
    });
  }, []);

  return (
    <>
      <h2>autogenerated full list</h2>
      <hr />
      {DB.map((item, index) => (
        <div key={index} onClick={(num) => setCurPopupNum(index)}>
          {index + 1}. {item.head}
        </div>
      ))}
      <hr />
      <h2>predefined svg buttons example</h2>
      <hr />
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 400 600"
        ref={svgref}
      >
        <g pointerEvents="visiblePainted" cursor="pointer" id="click_1">
          <rect
            x="10"
            y="10"
            width="180"
            height="100"
            fill="pink"
            strokeWidth="1"
            stroke="black"
          />
          <text fill="white" x="40" y="50">
            i'm click zone 1
          </text>
        </g>
        <g id="view_1">
          <rect
            x="210"
            y="10"
            width="180"
            height="100"
            fill="rebeccapurple"
            strokeWidth="1"
            stroke="black"
          />
          <text fill="white" x="240" y="50">
            i'm view 1
          </text>
        </g>

        <g pointerEvents="visiblePainted" cursor="pointer" id="click_3">
          <rect
            x="10"
            y="130"
            width="180"
            height="100"
            fill="pink"
            strokeWidth="1"
            stroke="black"
          />
          <text fill="white" x="40" y="160">
            i'm click zone 3
          </text>
        </g>
        <g id="view_3">
          <rect
            x="210"
            y="130"
            width="180"
            height="100"
            fill="rebeccapurple"
            strokeWidth="1"
            stroke="black"
          />
          <text fill="white" x="240" y="160">
            i'm view 3
          </text>
        </g>
      </svg>
      {popupIsOpen && <div>is open</div>}

      <Popup
        popupIsOpen={popupIsOpen}
        curPopupNum={curPopupNum}
        //closePopup={() => setPopupIsOpen(false)}
        closePopup={() => setCurPopupNum(-1)}
        nextPopup={nextPopup}
        prevPopup={prevPopup}
      ></Popup>
    </>
  );
};

export default PopupTriggers;
